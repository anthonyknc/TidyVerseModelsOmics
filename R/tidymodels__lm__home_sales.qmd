---
title: "Supervised Machine Learning--Regression, Linear Regression"
author: Anthony Chan
format:
  html:    
    self-contained: true
toc: true
date-modified: last-modified
date-format: "YYYY-MM-DD"
---

```{r}
#| output: false
library(tidyverse)
library(tidymodels)
library(here)
```

## Creating training and test datasets
`home_sales`: This data contains information on homes sold in the Seattle, Washington area between 2015 and 2016. `selling_price` is the outcome variable.

```{r}
#| output: false
# Home sales dataset
home_sales <- read_csv(here("data", "home_sales.csv"))
```

```{r}
# Create a data split object
home_split <- initial_split(
  data = home_sales,
  prop = 0.70,
  # Stratifying by the outcome variable (i.e. ensure both datasets have a similar range)
  strata = selling_price
)

# Create the training data
home_train <- home_split %>% training()

# Create the test data
home_test <- home_split %>% testing()

# Check number of rows in each dataset
nrow(home_train)
nrow(home_test)
```

## Distribution of outcome variable values
```{r}
# Distribution of selling_price in training data
home_train %>% 
  summarize(
    min_sell_price = min(selling_price),
    max_sell_price = max(selling_price),
    mean_sell_price = mean(selling_price),
    sd_sell_price = sd(selling_price)
  )

# Distribution of selling_price in test data
home_test  %>% 
  summarize(
    min_sell_price = min(selling_price),
    max_sell_price = max(selling_price),
    mean_sell_price = mean(selling_price),
    sd_sell_price = sd(selling_price)
  )
```

## Fitting a linear regression model
```{r}
# Initialize a linear regression object, linear_model
linear_model <- linear_reg() %>% 
  # Set the model engine
  set_engine("lm") %>% 
  # Set the model mode
  set_mode("regression")

# Fit the model using the training data
# Only use home_age and sqft_living as the predictor variables for now
lm_fit <- linear_model %>% 
  fit(selling_price ~ home_age + sqft_living, data = home_train)

# Print lm_fit to view model information
lm_fit %>% broom::tidy()
```

## Predicting home selling prices
```{r}
# Predict selling_price
home_predictions <- predict(lm_fit, new_data = home_test)

# View predicted selling prices
home_predictions

# Combine test data with predictions
home_test_results <- home_test %>% 
  select(selling_price, home_age, sqft_living) %>% 
  bind_cols(home_predictions)
```

## Model performance metrics
```{r}
# Print home_test_results
home_test_results

# Calculate the RMSE metric
home_test_results %>% rmse(true = selling_price, estimate = .pred)

# Calculate the R squared metric
home_test_results %>% rsq(true = selling_price, estimate = .pred)
```

## R squared plot
```{r}
# Create an R squared plot of model performance
ggplot(home_test_results, aes(x = selling_price, y = .pred)) +
  geom_point(alpha = 0.5) +
  geom_abline(color = "blue", linetype = 2) +
  # Use same scale for plots of observed vs predicted values
  coord_obs_pred() +
  labs(x = "Actual Home Selling Price", y = "Predicted Selling Price")
```

## Complete model fitting process with last_fit()

```{r}
# Define a linear regression model
linear_model <- linear_reg() %>% 
  set_engine("lm") %>% 
  set_mode("regression")

# Train linear_model with last_fit() using all available predictors
linear_fit <- linear_model %>% 
  last_fit(selling_price ~ ., split = home_split)

# Collect predictions and view results
predictions_df <- linear_fit %>% collect_predictions()
predictions_df

# Make an R squared plot using predictions_df
ggplot(predictions_df, aes(x = selling_price, y = .pred)) +
  geom_point(alpha = 0.5) +
  geom_abline(color = "blue", linetype = 2) +
  coord_obs_pred() +
  labs(x = "Actual Home Selling Price", y = "Predicted Selling Price")
```